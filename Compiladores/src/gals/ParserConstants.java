package gals;

public interface ParserConstants {

    int START_SYMBOL = 49;

    int FIRST_NON_TERMINAL = 49;
    int FIRST_SEMANTIC_ACTION = 88;

    int[][] PARSER_TABLE
            = {
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, 3, -1, -1, -1, -1, -1, -1, -1, -1, 3, 2, 2, 2, -1, -1, -1, 3, -1, 3, -1, 3, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, 4, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, 7, -1, 5, -1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, 35, 36},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, 18, 18, 18, 18},
                {-1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, 16, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, 24, 22, -1, -1, -1, -1, -1, -1, 21, 25, -1, 20, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, 26, 27, 31, 32, 30, -1, -1, -1, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, 51, 51, 51, 51, 51, 51, -1, -1, -1, -1, -1, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51, -1, 51, -1, -1, -1, -1, -1, -1, -1, 51, 51, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, 53, 54, -1, -1, -1, -1, -1, 52, -1, 52, 52, -1, -1, -1},
                {-1, 39, 39, 39, 39, 39, 39, -1, -1, -1, -1, -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, -1, 39, -1, -1, -1, -1, -1, -1, -1, 39, 39, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, 43, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 46, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, 55, 55, 55, 55, 55, 55, -1, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, -1, 55, -1, -1, -1, -1, -1, -1, -1, 58, 55, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, 59, 59, 59, 59, 59, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, 59, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, 61, 61, 61, 61, 60, 60, -1, -1, -1, -1, -1, 60, -1, 60, 60, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, 63, 64, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, 66, 66, 66, 66, 66, 66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 66, -1, -1, -1, -1, -1, -1, -1, -1, 66, 66, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 67, 67, 67, 67, 67, 67, 67, -1, 68, 69, -1, -1, 67, -1, 67, 67, -1, -1, -1},
                {-1, 70, 70, 70, 70, 70, 70, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 70, -1, -1, -1, -1, -1, -1, -1, -1, 70, 70, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 71, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 71, 71, 71, 71, 71, 71, 71, -1, 71, 71, 72, 73, 71, -1, 71, 71, -1, -1, -1},
                {-1, 74, 74, 74, 74, 74, 74, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 74, -1, -1, -1, -1, -1, -1, -1, -1, 74, 74, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 75, 75, 75, 75, 75, 75, 75, -1, 75, 75, 75, 75, 75, 76, 75, 75, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77, 78, 79, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, 80, 81, 82, 84, 85, 83, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 86, -1, -1, -1, -1, -1, -1, -1, -1, 87, 88, -1, -1, -1, -1, -1, -1, -1, -1, -1}
            };

    int[][] PRODUCTIONS
            = {
                {103, 59, 21, 50, 14, 104},
                {52, 44, 51},
                {0},
                {52, 44, 51},
                {53},
                {55},
                {56},
                {57},
                {58},
                {10, 60},
                {0},
                {64, 61},
                {0},
                {64, 61},
                {62, 65, 44},
                {45, 66, 118, 119},
                {46, 67, 124, 125},
                {2, 120, 63},
                {0},
                {42, 2, 120, 63},
                {19},
                {16},
                {9},
                {23},
                {8},
                {17},
                {3},
                {4},
                {27},
                {15},
                {7},
                {5},
                {6},
                {62, 54, 126, 68, 122},
                {46},
                {47},
                {48},
                {20, 29, 62, 123, 30},
                {22, 29, 70, 30},
                {68, 102, 71},
                {0},
                {42, 68, 102, 71},
                {18, 68, 127, 45, 50, 72, 73, 14, 128},
                {0},
                {74},
                {131, 12, 68, 130, 45, 50, 75},
                {0},
                {131, 12, 68, 130, 45, 50, 75},
                {0},
                {131, 13, 50},
                {132, 11, 50, 28, 45, 68, 133, 14},
                {76, 69},
                {0},
                {35, 76, 105, 69},
                {36, 76, 106, 69},
                {77},
                {27, 99},
                {15, 100},
                {37, 76, 101},
                {80, 78},
                {0},
                {79, 97, 80, 98},
                {31},
                {32},
                {33},
                {34},
                {82, 81},
                {0},
                {38, 82, 89, 81},
                {39, 82, 90, 81},
                {84, 83},
                {0},
                {40, 84, 91, 83},
                {41, 84, 92, 83},
                {87, 85},
                {0},
                {43, 86},
                {24, 110},
                {25, 111},
                {26, 112},
                {2, 121},
                {3, 93},
                {4, 94},
                {7, 107},
                {5, 108},
                {6, 109},
                {29, 68, 30},
                {38, 87, 95},
                {39, 87, 96}
            };

    String[] PARSER_ERROR
            = {
                "",
                "esperado EOF",//"Era esperado fim de programa",
                "esperado identificador",//"Era esperado id",
                "esperado constante inteira",
                "esperado constante real",
                "esperado constante binaria",
                "esperado constante hexadecimal",
                "esperado constante string",
                "esperado bin",
                "esperado bool",
                "esperado def",
                "esperado do",
                "esperado elif",
                "esperado else",
                "esperado end",
                "esperado false",
                "esperado float",
                "esperado hexa",
                "esperado if",
                "esperado int",
                "esperado listen",
                "esperado main",
                "esperado speak",
                "esperado str",
                "esperado toInt",
                "esperado toBin",
                "esperado toHexa",
                "esperado true",
                "esperado whileFalse",
                "esperado \"(\"",
                "esperado \")\"",
                "esperado \"==\"",
                "esperado \"!=\"",
                "esperado \"<\"",
                "esperado \">\"",
                "esperado \"&\"",
                "esperado \"|\"",
                "esperado \"!\"",
                "esperado \"+\"",
                "esperado \"-\"",
                "esperado \"*\"",
                "esperado \"/\"",
                "esperado \",\"",
                "esperado \".\"",
                "esperado \";\"",
                "esperado \":\"",
                "esperado \"=\"",
                "esperado \"+=\"",
                "esperado \"-=\"",
                "esperado def main",//"<programa> inválido",
                "esperado id do if listen speak ",//"<lista_de_comandos> inválido",
                "esperado id do elif else end if listen speak whileFalse",//"<lista_de_comandos_repete> inválido",
                "esperado id do if listen speak",//"<comandos> inválido",
                "esperado id",//"<atribuicao> inválido",
                "esperado operador de atribuição",//"<atribuicao_sequencia> inválido",
                "esperado listen",//"<entrada_de_dados> inválido",
                "esperado speak",//"<saida_de_dados> inválido",
                "esperado if",//"<selecao> inválido",
                "esperado do",//"<repeticao> inválido",
                "esperado def main",//"<declaracao> inválido",
                "esperado id",//"<declaracao_de_variaveis> inválido",
                "esperado id main",//"<declaracao_de_variaveis_repete> inválido",
                "esperado id",//"<lista_id> inválido",
                "esperado ) , : operador de atribuição",//"<lista_id_repete> inválido",
                "esperado id",//"<variavel> inválido",
                "esperado : =",//"<variavel_sequencia> inválido",
                "esperado tipo",//"<tipo> inválido",
                "esperada uma constante", //"<valor> inválido",
                "esperada uma expressão ",//"<expressao> inválido",
                "esperada uma expressão ",//"<expressao_sequencia> inválido",
                "esperada uma expressão ",//"<lista_de_expressoes> inválido",
                "esperado ) ,",//"<lista_de_expressoes_repete> inválido",
                "esperado elif else end",//"<elif_opc> inválido",
                "esperado else end",//"<else_opc> inválido",
                "esperado elif",//"<lista_elif> inválido",
                "esperado elif else end",//"<lista_elif_repete> inválido",
                "esperada uma expressão ",//"<elemento> inválido",
                "esperada uma expressão ",//"<relacional> inválido",
                "esperada uma expressão ",//"<relacional_opc> inválido",
                "esperada uma expressão ",//"<operador_relacional> inválido",
                "esperada uma expressão ",//"<aritmetica> inválido",
                "esperada uma expressão ",//"<aritmetica_sequencia> inválido",
                "esperada uma expressão ",//"<termo> inválido",
                "esperada uma expressão ",//"<termo_sequencia> inválido",
                "esperada uma expressão ",//"<fator> inválido",
                "esperada uma expressão ",//"<fator_sequencia> inválido",
                "esperada uma expressão ",//"<fator_sequencia_tipo> inválido",
                "esperada uma expressão ",//"<membro> inválido"
            };
}
