package view;

import gals.LexicalError;
import gals.Lexico;
import gals.SemanticError;
import gals.Semantico;
import gals.Sintatico;
import gals.SyntaticError;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.KeyStroke;
import javax.swing.filechooser.FileNameExtensionFilter;
import model.Rotulo;
import utils.GalsUtils;

/**
 *
 * @author Matheus
 */
public class TelaInicial extends javax.swing.JFrame {

    private File file;
    private static final String MENSAGEM_SIMBOLO_INVALIDO = "símbolo inválido";

    public TelaInicial() {
        initComponents();
        acionarAtalhos();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        editor = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        areaParaMensagens = new javax.swing.JTextArea();
        barraDeStatus = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        btAbrir = new javax.swing.JButton();
        btNovo = new javax.swing.JButton();
        btCopiar = new javax.swing.JButton();
        btEquipe = new javax.swing.JButton();
        btSalvar = new javax.swing.JButton();
        btColar = new javax.swing.JButton();
        btRecortar = new javax.swing.JButton();
        btCompilar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1170, 665));

        jScrollPane2.setViewportBorder(javax.swing.BorderFactory.createEtchedBorder());

        editor.setColumns(20);
        editor.setRows(5);
        jScrollPane2.setViewportView(editor);

        areaParaMensagens.setEditable(false);
        areaParaMensagens.setColumns(20);
        areaParaMensagens.setRows(5);
        jScrollPane1.setViewportView(areaParaMensagens);

        barraDeStatus.setEditable(false);

        jPanel1.setPreferredSize(new java.awt.Dimension(1030, 93));

        btAbrir.setText("abrir [ctrl + o]");
        btAbrir.setPreferredSize(new java.awt.Dimension(140, 23));
        btAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAbrirActionPerformed(evt);
            }
        });

        btNovo.setText("novo [ctrl + n]");
        btNovo.setPreferredSize(new java.awt.Dimension(140, 23));
        btNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNovoActionPerformed(evt);
            }
        });

        btCopiar.setText("copiar [ctrl + c]");
        btCopiar.setPreferredSize(new java.awt.Dimension(140, 23));
        btCopiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCopiarActionPerformed(evt);
            }
        });

        btEquipe.setText("equipe [F1]");
        btEquipe.setPreferredSize(new java.awt.Dimension(140, 23));
        btEquipe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEquipeActionPerformed(evt);
            }
        });

        btSalvar.setText("salvar [ctrl + s]");
        btSalvar.setPreferredSize(new java.awt.Dimension(140, 23));
        btSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSalvarActionPerformed(evt);
            }
        });

        btColar.setText("colar [ctrl + v]");
        btColar.setPreferredSize(new java.awt.Dimension(140, 23));
        btColar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btColarActionPerformed(evt);
            }
        });

        btRecortar.setText("recortar [ctrl + x]");
        btRecortar.setPreferredSize(new java.awt.Dimension(140, 23));
        btRecortar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRecortarActionPerformed(evt);
            }
        });

        btCompilar.setText("compilar [F9]");
        btCompilar.setPreferredSize(new java.awt.Dimension(140, 23));
        btCompilar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCompilarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1156, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(btNovo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(1, 1, 1)
                    .addComponent(btAbrir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(2, 2, 2)
                    .addComponent(btSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(2, 2, 2)
                    .addComponent(btCopiar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(2, 2, 2)
                    .addComponent(btColar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(3, 3, 3)
                    .addComponent(btRecortar, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(btCompilar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(2, 2, 2)
                    .addComponent(btEquipe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 93, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(18, 18, 18)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btAbrir, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btCopiar, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btEquipe, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btColar, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btRecortar, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btCompilar, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1156, Short.MAX_VALUE)
                .addGap(2, 2, 2))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(barraDeStatus, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 427, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(barraDeStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNovoActionPerformed
        areaParaMensagens.setText("");
        editor.setText("");
        barraDeStatus.setText("");

    }//GEN-LAST:event_btNovoActionPerformed

    private void btAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAbrirActionPerformed
        acionarAtalhoAbrir();
    }//GEN-LAST:event_btAbrirActionPerformed

    private void btSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSalvarActionPerformed
        acionarAtalhoSalvar();
    }//GEN-LAST:event_btSalvarActionPerformed

    private void btCopiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCopiarActionPerformed
        acionarAtalhoCopiar();
    }//GEN-LAST:event_btCopiarActionPerformed

    private void btColarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btColarActionPerformed
        acionarAtalhoColar();
    }//GEN-LAST:event_btColarActionPerformed

    private void btRecortarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRecortarActionPerformed
        acionarAtalhoRecortar();
    }//GEN-LAST:event_btRecortarActionPerformed

    private void btCompilarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCompilarActionPerformed
        acionarAtalhoCompilar();
    }//GEN-LAST:event_btCompilarActionPerformed

    private void btEquipeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEquipeActionPerformed
        areaParaMensagens.setText("");
        areaParaMensagens.append("Equipe: Matheus Soares Lima, Jeferson Bonecher");
    }//GEN-LAST:event_btEquipeActionPerformed

    public void acionarAtalhoNovo() {
        Action buttonAction = new AbstractAction("novo [ctrl + n]") {

            @Override
            public void actionPerformed(ActionEvent evt) {
                btNovoActionPerformed(evt);
            }
        };

        String key = "Novo";
        btNovo.setAction(buttonAction);
        buttonAction.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_N, KeyEvent.CTRL_DOWN_MASK));
        btNovo.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_N, KeyEvent.CTRL_DOWN_MASK), key);
        btNovo.getActionMap().put(key, buttonAction);
    }

    public void acionarAtalhoAbrir() {
        Action buttonAction = new AbstractAction("abrir [ctrl + o]") {

            @Override
            public void actionPerformed(ActionEvent evt) {
                abrirAction();
            }
        };

        String key = "Abrir";
        btAbrir.setAction(buttonAction);
        buttonAction.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_O, KeyEvent.CTRL_DOWN_MASK));
        btAbrir.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_O, KeyEvent.CTRL_DOWN_MASK), key);
        btAbrir.getActionMap().put(key, buttonAction);
    }

    public void acionarAtalhoSalvar() {
        Action buttonAction = new AbstractAction("salvar [ctrl + s]") {

            @Override
            public void actionPerformed(ActionEvent evt) {
                salvarAction();
            }
        };

        String key = "Salvar";
        btSalvar.setAction(buttonAction);
        buttonAction.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_S, KeyEvent.CTRL_DOWN_MASK));
        btSalvar.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_S, KeyEvent.CTRL_DOWN_MASK), key);
        btSalvar.getActionMap().put(key, buttonAction);
    }

    public void acionarAtalhoColar() {
        Action buttonAction = new AbstractAction("colar [ctrl + v]") {

            @Override
            public void actionPerformed(ActionEvent evt) {
                editor.paste();
            }
        };

        String key = "Colar";
        btColar.setAction(buttonAction);
        buttonAction.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_V, KeyEvent.CTRL_DOWN_MASK));
        btColar.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_V, KeyEvent.CTRL_DOWN_MASK), key);
        btColar.getActionMap().put(key, buttonAction);
    }

    public void acionarAtalhoCopiar() {
        Action buttonAction = new AbstractAction("copiar [ctrl + c]") {

            @Override
            public void actionPerformed(ActionEvent evt) {
                editor.copy();
            }
        };

        String key = "Colar";
        btCopiar.setAction(buttonAction);
        buttonAction.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_C, KeyEvent.CTRL_DOWN_MASK));
        btCopiar.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_C, KeyEvent.CTRL_DOWN_MASK), key);
        btCopiar.getActionMap().put(key, buttonAction);
    }

    public void acionarAtalhoRecortar() {
        Action buttonAction = new AbstractAction("recortar [ctrl + x]") {

            @Override
            public void actionPerformed(ActionEvent evt) {
                editor.cut();
            }
        };

        String key = "Recortar";
        btRecortar.setAction(buttonAction);
        buttonAction.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_X, KeyEvent.CTRL_DOWN_MASK));
        btRecortar.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_X, KeyEvent.CTRL_DOWN_MASK), key);
        btRecortar.getActionMap().put(key, buttonAction);
    }

    public void acionarAtalhoCompilar() {
        Action buttonAction = new AbstractAction("compilar [F9]") {

            @Override
            public void actionPerformed(ActionEvent evt) {
                compilarAction();
            }
        };

        String key = "Compilar";
        btCompilar.setAction(buttonAction);
        buttonAction.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_F9, 0));
        btCompilar.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_F9, 0), key);
        btCompilar.getActionMap().put(key, buttonAction);
    }

    public void acionarAtalhoEquipe() {
        Action buttonAction = new AbstractAction("equipe [F1]") {

            @Override
            public void actionPerformed(ActionEvent evt) {
                btEquipeActionPerformed(evt);
            }
        };

        String key = "Equipe";
        btEquipe.setAction(buttonAction);
        buttonAction.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_F1, 0));
        btEquipe.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_F1, 0), key);
        btEquipe.getActionMap().put(key, buttonAction);
    }

    private void abrirAction() {
        JFileChooser jfc = new JFileChooser();
        jfc.setDialogTitle("Escolha um arquivo para abrir");
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Text Documents (*.txt)", "txt");
        jfc.setFileFilter(filter);
        FileInputStream fis;
        DataInputStream dis;

        int returnValue = jfc.showOpenDialog(editor);

        if (returnValue == JFileChooser.APPROVE_OPTION) {
            try {
                file = jfc.getSelectedFile();
                barraDeStatus.setText(file.getAbsolutePath());
                fis = new FileInputStream(file);
                dis = new DataInputStream(fis);
                StringBuilder builder = new StringBuilder();
                try (InputStream input = new FileInputStream(file)) {
                    BufferedReader reader = new BufferedReader(new InputStreamReader(input, "UTF-8"));
                    String line;
                    while ((line = reader.readLine()) != null) {
                        builder.append(line);
                    }
                }
                editor.read(new InputStreamReader(dis), builder);
                areaParaMensagens.setText("");
            } catch (FileNotFoundException ex) {
                Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void salvarAction() {
        JFileChooser jfc = new JFileChooser();
        jfc.setDialogTitle("Escolha destino para salvar o arquivo");
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Text Documents (*.txt)", "txt");
        jfc.setFileFilter(filter);

        if (barraDeStatus.getText().isEmpty()) {
            int returnValue = jfc.showSaveDialog(editor);

            if (returnValue == JFileChooser.APPROVE_OPTION) {
                file = jfc.getSelectedFile();
                if (!jfc.getSelectedFile().toString().endsWith(".txt")) {
                    file = new File(file.toString() + ".txt");
                }
                try (FileWriter fileWriter = new FileWriter(file)) {
                    String fileContent = editor.getText();
                    fileWriter.write(fileContent);
                    barraDeStatus.setText(file.getAbsolutePath());
                    fileWriter.close();
                    areaParaMensagens.setText("");
                } catch (IOException e) {
                    System.out.println("Erro ao salvar o arquivo" + e.getMessage());
                }
            }
        } else {
            try (FileWriter fileWriter = new FileWriter(file)) {
                String editorTexto = editor.getText();
                fileWriter.write(editorTexto);
            } catch (IOException e) {
                System.out.println("Erro ao salvar o arquivo" + e.getMessage());
            }
        }
    }

    private void compilarAction() {
        Rotulo.setSequencia(0);
        Lexico lexico = new Lexico();
        Sintatico sintatico = new Sintatico();
        Semantico semantico = new Semantico();
        StringReader sr = new StringReader(editor.getText());

        try {
            lexico.setInput(sr);
            sintatico.parse(lexico, semantico);
            String caminho = gerarArquivoCompilado(semantico.getCodigoGerado().toString());
            areaParaMensagens.setText("Programa compilado com sucesso");
            areaParaMensagens.append(" - ");
            areaParaMensagens.append(getTime());
            areaParaMensagens.append("\n");
            areaParaMensagens.append("Caminho do código gerado: ");
            areaParaMensagens.append(caminho);

        } catch (SyntaticError ex) {
            areaParaMensagens.setText(GalsUtils.VAZIO);
            StringReader erro = new StringReader(editor.getText().substring(ex.getPosition(), editor.getText().length()));
            lexico.setInput(erro);
            try {
                tratarErroSintatico(lexico, ex);
            } catch (LexicalError ex1) {
                tratarErroLexico(ex1);
            }
        } catch (SemanticError ex) {
            areaParaMensagens.setText(GalsUtils.VAZIO);
            tratarErroSemantico(ex);
        } catch (LexicalError e) {
            areaParaMensagens.setText(GalsUtils.VAZIO);
            tratarErroLexico(e);
        } catch (IOException ex) {
            areaParaMensagens.setText(GalsUtils.VAZIO);
            Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private String gerarArquivoCompilado(String codigoGerado) throws IOException {
        File directory = new File("C:\\temp\\");
        directory.mkdir();
        File file = new File("C:\\temp\\CodigoGerado.txt");
        file.createNewFile();
        FileWriter fw = new FileWriter(file);
        fw.append(codigoGerado);
        fw.close();
        
        return file.getAbsolutePath();
    }

    private void tratarErroSemantico(SemanticError ex) {
        areaParaMensagens.append("Erro: ");
        areaParaMensagens.append(GalsUtils.HIFEN);
        areaParaMensagens.append(GalsUtils.ESPACO);
        areaParaMensagens.append(ex.getMessage());
    }
    
        private void tratarErroSintatico(Lexico lexico, SyntaticError ex) throws LexicalError {
        areaParaMensagens.append("Erro na linha ");
        areaParaMensagens.append(String.valueOf(countLine(editor.getText(), ex.getPosition())));
        areaParaMensagens.append(GalsUtils.HIFEN);
        areaParaMensagens.append(" encontrado ");
        areaParaMensagens.append(lexico.nextToken().getLexeme());
        areaParaMensagens.append(GalsUtils.ESPACO);
        areaParaMensagens.append(ex.getMessage());
    }

    private void tratarErroLexico(LexicalError e) {
        areaParaMensagens.setText(GalsUtils.VAZIO);
        areaParaMensagens.append("Erro na linha ");
        areaParaMensagens.append(String.valueOf(countLine(editor.getText(), e.getPosition())));
        areaParaMensagens.append(GalsUtils.HIFEN);
        if (MENSAGEM_SIMBOLO_INVALIDO.equals(e.getMessage())) {
            areaParaMensagens.append(editor.getText().substring(e.getPosition(), e.getPosition() + 1));
        }
        areaParaMensagens.append(GalsUtils.ESPACO);
        areaParaMensagens.append(e.getMessage());
    }

    private Integer countLine(String text, int position) {
        String textline = text.substring(0, position);
        Matcher m = Pattern.compile("(\n)", Pattern.DOTALL).matcher(textline);
        int quantidade = 0;
        while (m.find()) {
            quantidade++;
        }
        return quantidade + 1;
    }

    public void acionarAtalhos() {
        acionarAtalhoAbrir();
        acionarAtalhoColar();
        acionarAtalhoCompilar();
        acionarAtalhoCopiar();
        acionarAtalhoEquipe();
        acionarAtalhoNovo();
        acionarAtalhoRecortar();
        acionarAtalhoSalvar();
    }

    private String getTime() {
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");
        LocalDateTime time = LocalDateTime.now();
        return dtf.format(time);
    }

    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaInicial().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areaParaMensagens;
    private javax.swing.JTextField barraDeStatus;
    private javax.swing.JButton btAbrir;
    private javax.swing.JButton btColar;
    private javax.swing.JButton btCompilar;
    private javax.swing.JButton btCopiar;
    private javax.swing.JButton btEquipe;
    private javax.swing.JButton btNovo;
    private javax.swing.JButton btRecortar;
    private javax.swing.JButton btSalvar;
    private javax.swing.JTextArea editor;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

}
